// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"pokemon-api-server/internal/model"
)

func newPokemon(db *gorm.DB, opts ...gen.DOOption) pokemon {
	_pokemon := pokemon{}

	_pokemon.pokemonDo.UseDB(db, opts...)
	_pokemon.pokemonDo.UseModel(&model.Pokemon{})

	tableName := _pokemon.pokemonDo.TableName()
	_pokemon.ALL = field.NewAsterisk(tableName)
	_pokemon.Name = field.NewString(tableName, "name")
	_pokemon.Form = field.NewString(tableName, "form")
	_pokemon.ID = field.NewInt64(tableName, "id")
	_pokemon.Generation = field.NewInt64(tableName, "generation")
	_pokemon.Speed = field.NewInt64(tableName, "speed")
	_pokemon.SpecialDefense = field.NewInt64(tableName, "special_defense")
	_pokemon.SpecialAttack = field.NewInt64(tableName, "special_attack")
	_pokemon.Defense = field.NewInt64(tableName, "defense")
	_pokemon.Attack = field.NewInt64(tableName, "attack")
	_pokemon.Hp = field.NewInt64(tableName, "hp")
	_pokemon.Total = field.NewInt64(tableName, "total")
	_pokemon.Type2 = field.NewInt64(tableName, "type_2")
	_pokemon.Type1 = field.NewInt64(tableName, "type_1")
	_pokemon.PokedexNumber = field.NewInt64(tableName, "pokedex_number")

	_pokemon.fillFieldMap()

	return _pokemon
}

type pokemon struct {
	pokemonDo

	ALL            field.Asterisk
	Name           field.String // the name of the pokemon
	Form           field.String // the form of the pokemon
	ID             field.Int64  // pk id for each pokemon
	Generation     field.Int64  // the pokemon's generation
	Speed          field.Int64  // pokemon speed
	SpecialDefense field.Int64  // pokemon special defense
	SpecialAttack  field.Int64  // pokemon special attack
	Defense        field.Int64  // pokemon defense
	Attack         field.Int64  // pokemon attack
	Hp             field.Int64  // pokemon hit point
	Total          field.Int64  // total stats
	Type2          field.Int64  // the second type of the pokemon
	Type1          field.Int64  // the first type of the pokemon
	PokedexNumber  field.Int64  // pokemon pokedex number (national no)

	fieldMap map[string]field.Expr
}

func (p pokemon) Table(newTableName string) *pokemon {
	p.pokemonDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pokemon) As(alias string) *pokemon {
	p.pokemonDo.DO = *(p.pokemonDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pokemon) updateTableName(table string) *pokemon {
	p.ALL = field.NewAsterisk(table)
	p.Name = field.NewString(table, "name")
	p.Form = field.NewString(table, "form")
	p.ID = field.NewInt64(table, "id")
	p.Generation = field.NewInt64(table, "generation")
	p.Speed = field.NewInt64(table, "speed")
	p.SpecialDefense = field.NewInt64(table, "special_defense")
	p.SpecialAttack = field.NewInt64(table, "special_attack")
	p.Defense = field.NewInt64(table, "defense")
	p.Attack = field.NewInt64(table, "attack")
	p.Hp = field.NewInt64(table, "hp")
	p.Total = field.NewInt64(table, "total")
	p.Type2 = field.NewInt64(table, "type_2")
	p.Type1 = field.NewInt64(table, "type_1")
	p.PokedexNumber = field.NewInt64(table, "pokedex_number")

	p.fillFieldMap()

	return p
}

func (p *pokemon) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pokemon) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 16)
	p.fieldMap["name"] = p.Name
	p.fieldMap["form"] = p.Form
	p.fieldMap["id"] = p.ID
	p.fieldMap["generation"] = p.Generation
	p.fieldMap["speed"] = p.Speed
	p.fieldMap["special_defense"] = p.SpecialDefense
	p.fieldMap["special_attack"] = p.SpecialAttack
	p.fieldMap["defense"] = p.Defense
	p.fieldMap["attack"] = p.Attack
	p.fieldMap["hp"] = p.Hp
	p.fieldMap["total"] = p.Total
	p.fieldMap["type_2"] = p.Type2
	p.fieldMap["type_1"] = p.Type1
	p.fieldMap["pokedex_number"] = p.PokedexNumber

}

func (p pokemon) clone(db *gorm.DB) pokemon {
	p.pokemonDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pokemon) replaceDB(db *gorm.DB) pokemon {
	p.pokemonDo.ReplaceDB(db)
	return p
}

type pokemonDo struct{ gen.DO }

func (p pokemonDo) Debug() *pokemonDo {
	return p.withDO(p.DO.Debug())
}

func (p pokemonDo) WithContext(ctx context.Context) *pokemonDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pokemonDo) ReadDB() *pokemonDo {
	return p.Clauses(dbresolver.Read)
}

func (p pokemonDo) WriteDB() *pokemonDo {
	return p.Clauses(dbresolver.Write)
}

func (p pokemonDo) Session(config *gorm.Session) *pokemonDo {
	return p.withDO(p.DO.Session(config))
}

func (p pokemonDo) Clauses(conds ...clause.Expression) *pokemonDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pokemonDo) Returning(value interface{}, columns ...string) *pokemonDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pokemonDo) Not(conds ...gen.Condition) *pokemonDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pokemonDo) Or(conds ...gen.Condition) *pokemonDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pokemonDo) Select(conds ...field.Expr) *pokemonDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pokemonDo) Where(conds ...gen.Condition) *pokemonDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pokemonDo) Order(conds ...field.Expr) *pokemonDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pokemonDo) Distinct(cols ...field.Expr) *pokemonDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pokemonDo) Omit(cols ...field.Expr) *pokemonDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pokemonDo) Join(table schema.Tabler, on ...field.Expr) *pokemonDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pokemonDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pokemonDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pokemonDo) RightJoin(table schema.Tabler, on ...field.Expr) *pokemonDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pokemonDo) Group(cols ...field.Expr) *pokemonDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pokemonDo) Having(conds ...gen.Condition) *pokemonDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pokemonDo) Limit(limit int) *pokemonDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pokemonDo) Offset(offset int) *pokemonDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pokemonDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pokemonDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pokemonDo) Unscoped() *pokemonDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pokemonDo) Create(values ...*model.Pokemon) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pokemonDo) CreateInBatches(values []*model.Pokemon, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pokemonDo) Save(values ...*model.Pokemon) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pokemonDo) First() (*model.Pokemon, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pokemon), nil
	}
}

func (p pokemonDo) Take() (*model.Pokemon, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pokemon), nil
	}
}

func (p pokemonDo) Last() (*model.Pokemon, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pokemon), nil
	}
}

func (p pokemonDo) Find() ([]*model.Pokemon, error) {
	result, err := p.DO.Find()
	return result.([]*model.Pokemon), err
}

func (p pokemonDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Pokemon, err error) {
	buf := make([]*model.Pokemon, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pokemonDo) FindInBatches(result *[]*model.Pokemon, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pokemonDo) Attrs(attrs ...field.AssignExpr) *pokemonDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pokemonDo) Assign(attrs ...field.AssignExpr) *pokemonDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pokemonDo) Joins(fields ...field.RelationField) *pokemonDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pokemonDo) Preload(fields ...field.RelationField) *pokemonDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pokemonDo) FirstOrInit() (*model.Pokemon, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pokemon), nil
	}
}

func (p pokemonDo) FirstOrCreate() (*model.Pokemon, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pokemon), nil
	}
}

func (p pokemonDo) FindByPage(offset int, limit int) (result []*model.Pokemon, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pokemonDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pokemonDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pokemonDo) Delete(models ...*model.Pokemon) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pokemonDo) withDO(do gen.Dao) *pokemonDo {
	p.DO = *do.(*gen.DO)
	return p
}
